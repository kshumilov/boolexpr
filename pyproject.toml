[project]
name = "boolexpr"
version = "0.3.2"
description = "python binding for @cjdrake C BoolExpr library found in PyEDA"
readme = "README.md"
license = "GPL-3.0-or-later"
authors = [
    { name = "Kirill Shumilov", email = "kshumil@ncsu.edu" }
]
license-files = [
    "LICEN[CS]E*",
    "src/exprnode/src/LICENSE",
    "src/exprnode/test/LICENSE",
]
requires-python = ">=3.13"
dependencies = [
    "attrs>=25.3.0",
    "lark[interegular]>=1.2.2",
    "rich>=14.1.0",
]

[dependency-groups]
dev = [
    "commitizen>=4.8.3",
    "ipython>=9.4.0",
    "jupyterlab>=4.4.7",
    "mypy>=1.17.1",
    "rich[jupyter]>=14.1.0",
    "ruff>=0.12.11",
]

[tool.mypy]
python_version = "3.13"
strict = true
mypy_path = ["src"]
exclude = ["^src/boolexpr/(boolfunc,parsing)($|/)"]

[[tool.mypy.overrides]]
module = ["boolexpr.boolfunc", "boolexpr.boolfunc.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["boolexpr.parsing", "boolexpr.parsing.*"]
ignore_errors = true

[tool.ruff]
line-length = 120
indent-width = 4
exclude = [
    "ipynb",
    'src/boolexpr/parsing',
    'src/boolexpr/boolfunc',
]

[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
select = [
    "E", "W", # pycodestyle
    "F",      # Pyflakes
    "UP",     # Warn if certain things can changed due to newer Python versions
    "D",   # pydocstyle
    "C4",     # Catch incorrect use of comprehensions, dict, list, etc
    "ISC",    # Good use of string concatenation
    "ICN",    # Use common import conventions
    "PTH",    # Use pathlib instead of os.path
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    "TD",  # Be diligent with TODO comments
    "A",   # detect shadowed builtins
    "BLE", # disallow catch-all exceptions
    "COM", # enforce trailing comma rules
    "FBT", # detect boolean traps
    "N",   # enforce naming conventions, e.g. ClassName vs function_name
    "INP",
    "PIE",
    "RET",
    "TID",
    "ARG",
    "TC",
    "ERA",
    "INT",
    "INP",
    "RSE",
    "FLY",
    "C90",
    "PL",
]

ignore = [
    "B011",
    "COM819",
    "COM812",
    "D100", # Remove soon
    "D104", # Remove soon
    "D400", # Remove soon
    "D205", # Remove soon
    "N801", # PyEDA conventions
    "D105",
    "D101",
    "D102",
    "D103",
    "ERA001",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.scikit-build]
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "uv"
update_changelog_on_bump = true
major_version_zero = true

[build-system]
requires = ["scikit-build-core>=0.10"]
build-backend = "scikit_build_core.build"
