COMP: int
ONE: int
OP_AND: int
OP_EQ: int
OP_IMPL: int
OP_ITE: int
OP_NOT: int
OP_OR: int
OP_XOR: int
VAR: int
ZERO: int

type AstLeaf = tuple[str, int]
type AstNode = AstLeaf | tuple[str, tuple["AstNode", ...]]

class ExprNode:
    def kind(self) -> int: ...
    def size(self) -> int: ...
    def depth(self) -> int: ...
    def simple(self) -> bool: ...
    def id(self) -> int: ...
    def simplify(self) -> ExprNode: ...
    def compose(self, mapping: dict[ExprNode, ExprNode]) -> ExprNode: ...
    def restrict(self, mapping: dict[ExprNode, ExprNode]) -> ExprNode: ...
    def pushdown_not(self) -> ExprNode: ...
    def complete_sum(self) -> ExprNode: ...
    def to_cnf(self) -> ExprNode: ...
    def is_cnf(self) -> bool: ...
    def to_dnf(self) -> ExprNode: ...
    def is_dnf(self) -> bool: ...
    def to_nnf(self) -> ExprNode: ...
    def data(self) -> int | tuple[ExprNode, ...]: ...
    def to_ast(self) -> AstNode: ...
    def __iter__(self) -> ExprNode: ...
    def __next__(self) -> ExprNode: ...

One: ExprNode
Zero: ExprNode

def and_(*nodes: ExprNode) -> ExprNode: ...
def eq(*nodes: ExprNode) -> ExprNode: ...
def impl(p: ExprNode, q: ExprNode) -> ExprNode: ...
def ite(s: ExprNode, d1: ExprNode, d0: ExprNode) -> ExprNode: ...
def lit(idx: int) -> ExprNode: ...
def not_(node: ExprNode) -> ExprNode: ...
def or_(*nodes: ExprNode) -> ExprNode: ...
def xor(*nodes: ExprNode) -> ExprNode: ...
